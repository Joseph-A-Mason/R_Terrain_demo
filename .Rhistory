}
#Fills in d13C values for new and old C in each horizon, adjusting for D14C
Ind13C<-c(0.0, 0.0, 0.0, 0.0)
for (j in 1:4) {
#for (k in 1:4){
Ind13C[j]<-(SlopeC14t[j]*d13Clist[1, j+5])+Intercd13C[j]
#}
d13Clist[,j+9] <- d13C_w_decomp(nyr=numyr, Ind13C=Ind13C[j], Intercd13C=Intercd13C[j], C14t=d13Clist[,j+5], SlopeC14t=SlopeC14t[j])
}
#Calculate bulk values
#Total C for the two pools
d13Clist[,14]<-d13Clist[,2]+d13Clist[,3]
d13Clist[,15]<-d13Clist[,4]+d13Clist[,5]
#Delta-14C for the two pools
d13Clist[,16]<-(d13Clist[,6]*(d13Clist[,2]/d13Clist[,14]))+(d13Clist[,7]*(d13Clist[,3]/d13Clist[,14]))
d13Clist[,17]<-(d13Clist[,8]*(d13Clist[,4]/d13Clist[,15]))+(d13Clist[,9]*(d13Clist[,5]/d13Clist[,15]))
#d13C for the two pools
d13Clist[,18]<-(d13Clist[,10]*(d13Clist[,2]/d13Clist[,14]))+(d13Clist[,11]*(d13Clist[,3]/d13Clist[,14]))
d13Clist[,19]<-(d13Clist[,12]*(d13Clist[,4]/d13Clist[,15]))+(d13Clist[,13]*(d13Clist[,5]/d13Clist[,15]))
#Bulk values
d13Clist[,20]<-d13Clist[,14]+d13Clist[,15]
d13Clist[,21]<-(d13Clist[,16]*(d13Clist[,14]/d13Clist[,20]))+(d13Clist[,17]*(d13Clist[,15]/d13Clist[,20]))
d13Clist[,22]<-(d13Clist[,18]*(d13Clist[,14]/d13Clist[,20]))+(d13Clist[,19]*(d13Clist[,15]/d13Clist[,20]))
#Difference from observed d13C for the two horizons
d13Clist[,23]<- abs(d13Clist[,22]-obsd13C)
#Write results and parameters to dataframe
d13Cdf <- as.data.frame(d13Clist)
names(d13Cdf)<- c("Year", "P1_OCt","P1_NCt","P2_OCt","P2_NCt","P1_OC14t",
"P1_NC14t","P2_OC14t","P2_NC14t","P1_Od13C","P1_Nd13C",
"P2_Od13C","P2_Nd13C","P1_TCt","P2_TCt","P1_TC14t",
"P2_TC14t","P1_Td13C","P2_Td13C", "B_TC", "B_C14t", "B_d13C",
"Diffd13C")
Timescale <- d13Cdf$Year[which.min(d13Cdf$Diffd13C)]
print(paste("Time to observed bulk d13C:", Timescale, "years"))
#Check on steady state
d13Cdf$P1_TC14t[1]
d13Cdf$P1_TC14t[3000]
d13Cdf$P2_TC14t[1]
d13Cdf$P2_TC14t[3000]
d13Cdf$B_C14t[1]
d13Cdf$B_C14t[3000]
parnames<-c("Time to Observed bulk d13C",
"O. d13C Intercept P1", "N. d13C Intercept P1",
"O. Slope w D14C P2", "N. Slope w D14C P2",
"O. d13C Intercept P1", "N. d13C Intercept P1",
"O. Slope w D14C P2", "N. Slope w D14C P2",
"O.Init. C P1", "N.Init. C P1", "O.Init. C P2",
"N.Init. C P2","O.Init. D14C P1", "N.Init. D14C P1",
"O.Init. D14C P2", "N.Init. D14C P2","Observed d13C",
"O.k, P1","O.k, P2", "N.k, P1", "N.k, P2",
"O.Root input, P1", "O.Root input, P2","N.Root input, P1",
"N.Root input, P2", "Number of yr simulated")
parvalues<-c(Timescale,
Intercd13C[1], Intercd13C[2], Intercd13C[3], Intercd13C[4],
SlopeC14t[1], SlopeC14t[2], SlopeC14t[3], SlopeC14t[4],
OCinv[1], OCinv[2], OCinv[3], OCinv[4],
InitC14t[1], InitC14t[2],InitC14t[3], InitC14t[4],
obsd13C, Ok[1], Ok[2], Nk[1], Nk[2],
ORootIn[1], ORootIn[2],
NRootIn[1], NRootIn[2], numyr)
pardf<-data.frame(parnames, parvalues)
pardf.name <- paste0(HorizName,"Two-Pool_pars.txt")
#write results and parameter list
write.table(d13Cdf, filetext, row.names = FALSE, col.names = TRUE)
write.table(pardf, pardf.name, row.names = FALSE, col.names = FALSE)
ggplot(d13Cdf, aes(Year)) +
geom_line(aes(y=P1_TCt,linetype="P1"), colour="black",size=0.75)+
geom_line(aes(y=P2_TCt, linetype="P2"), colour="black", size=0.75)+
geom_line(aes(y=B_TC, linetype="Total"), colour="black", size=0.75)+
scale_linetype_manual("Horizon", values=c("Total"=1,"P1"=2, "P2"=3),
labels=c(P1, P2, Total))+
labs(x="Years", y="Total C")+
theme(aspect.ratio = 0.3,
panel.background=element_rect(fill="white", colour="black"),
panel.grid.major=element_line(colour="gray"),
panel.grid.minor=element_line(colour="gray"),
axis.title.y = element_text(size = rel(1), angle = 90),
axis.title.x = element_text(size = rel(1)),
axis.text = element_text(size = rel(1)),
legend.position="right",
legend.key.width=unit(1.5,"cm"),
legend.key =element_rect(fill="transparent"))
ggplot(d13Cdf, aes(Year)) +
geom_line(aes(y=P1_TC14t,linetype="P1"), colour="black",size=0.75)+
geom_line(aes(y=P2_TC14t, linetype="P2"), colour="black", size=0.75)+
geom_line(aes(y=B_C14t, linetype="Bulk"), colour="black", size=0.75)+
scale_linetype_manual("Horizon", values=c("Bulk"=1,"P1"=2, "P2"=3),
labels=c(Bulk, P1, P2))+
labs(x="Years", y=expression(paste(Delta^14,"C")))+
theme(aspect.ratio = 0.3,
panel.background=element_rect(fill="white", colour="black"),
panel.grid.major=element_line(colour="gray"),
panel.grid.minor=element_line(colour="gray"),
axis.title.y = element_text(size = rel(1), angle = 90),
axis.title.x = element_text(size = rel(1)),
axis.text = element_text(size = rel(1)),
legend.position="right",
legend.key.width=unit(1.5,"cm"),
legend.key =element_rect(fill="transparent"))
ggplot(d13Cdf, aes(Year)) +
geom_segment(aes(x=0, y=obsd13C, xend=numyr, yend=obsd13C), colour="gray", linetype=1, size=1.2)+
geom_line(aes(y=B_d13C, linetype="Bulk"), colour="black", size=0.75)+
geom_line(aes(y=P1_Td13C,linetype="P1"), colour="black",size=0.75)+
geom_line(aes(y=P2_Td13C, linetype="P2"), colour="black", size=0.75)+
scale_linetype_manual("Pool", values=c("Bulk"=1,"P1"=2, "P2"=3),
labels=c(Bulk, P1, P2))+
labs(x="Years", y=expression(paste(delta^13,"C")))+
theme(aspect.ratio = 0.3,
panel.background=element_rect(fill="white", colour="black"),
panel.grid.major=element_line(colour="gray"),
panel.grid.minor=element_line(colour="gray"),
axis.title.y = element_text(size = rel(1), angle = 90),
axis.title.x = element_text(size = rel(1)),
axis.text = element_text(size = rel(1)),
legend.position="right",
legend.key.width=unit(1.5,"cm"),
legend.key =element_rect(fill="transparent"))
library(rgeedim)
library(terra)
library(hillshader)
library(rayshader)
library(raster)
library(rayrender)
library(scales)
library(av)
ee_install() # create python virtual environment
library(rgee)
library(terra)
library(sf)
library(giscoR)
library(fs)
library(tidyverse)
library(lubridate)
library(ggshadow)
library(ggforce)
ee_install() # create python virtual environment
install.packages(c("aqp", "soilDB"))
library(aqp)
library(soilDB)
library(sf)
library(sharpshootR)
library(httr)
library(dendextend)
library(latticeExtra)
bb<-'-88.8245 43.0666,-88.8245 43.0745,-88.8039 43.0745,-88.8039 43.0666,-88.8245 43.0666'
# assemble AOI polygon into WKT
wkt <- sprintf('POLYGON((%s))', bb)
## init sf polygon
x <- st_as_sfc(wkt)
# set CRS as GCS WGS84
st_crs(x) <- 4326
# get overlapping map unit keys
# could also use SDA_query() with more elaborate SQL
m <- SDA_spatialQuery(x, what = 'mukey')
# compose SQL to return component details for these map unit keys
# return only:
# * map units overlapping with BBOX
# * major components
# * no misc. areas that might share name with a poorly-named soil series
sql <- sprintf(
"SELECT mukey, cokey, compname, compkind, comppct_r
FROM component
WHERE mukey IN %s
--AND majcompflag = 'Yes'
AND compkind != 'Miscellaneous area'
", format_SQL_in_statement(as.integer(m$mukey))
)
# send to SDA, result is a data.frame
s <- SDA_query(sql)
# get OSD morphology + extended summaries
osd <- fetchOSD(unique(s$compname), extended = TRUE)
# check out results
str(osd, 1)
# convert horizon boundary distinctness -> vertical distance
# see manual page
osd$SPC$hzd <- hzDistinctnessCodeToOffset(
osd$SPC$distinctness,
codes = c('very abrupt', 'abrubt', 'clear', 'gradual', 'diffuse')
)
SoilTaxonomyDendrogram(
spc = osd$SPC,
y.offset = 0.4,
rotationOrder = profile_id(osd$SPC)[order(osd$SPC$subgroup)],
max.depth = 180,
scaling.factor = 0.012,
cex.taxon.labels = 0.75,
cex.id = 0.85,
cex.names = 0.75,
width = 0.3,
name.style = 'center-center',
plot.depth.axis = TRUE,
axis.line.offset = -3.5,
hz.distinctness.offset = 'hzd'
)
# there may be records missing from SPC / geomorphic component
nm <- intersect(profile_id(osd$SPC), osd$geomcomp$series)
# keep only those series that exist in both
sub <- subset(osd$SPC, profile_id(osd$SPC) %in% nm)
# inverse problem: extra records in geomcomp summaries
# subset geomcopm
geomcomp.sub <- subset(osd$geomcomp, subset = series %in% profile_id(sub))
# viz geomorphic proportion summary, results contain clustering object
res <- vizGeomorphicComponent(geomcomp.sub)
print(res$fig)
library(aqp)
library(soilDB)
library(lattice)
library(maps)
library(aqp)
library(soilDB)
library(lattice)
library(maps)
library(aqp)
library(soilDB)
library(lattice)
library(maps)
Series1<-"valentine"
Series2<-"valent"
Series3<-"chelsea"
Series4<-"plainfield"
# fetch KSSL data by series name
sn <- c(Series1, Series2, Series3, Series4)
g <- fetchKSSL(series = sn, progress = FALSE)
# estimate soil depth based on horizon designations
sdc <- getSoilDepthClass(g, name='hzn_desgn')
# splice-into site data
site(g) <- sdc
# summarize soil depth by taxonname
tapply(g$depth, g$taxonname, summary)
# check
table(g$taxonname)
# normalize via lower-case
g$taxonname <- tolower(g$taxonname)
# OK
table(g$taxonname)
#any cases where the
Series1lc <- subset(g, taxonname == Series1)
Series2lc <- subset(g, taxonname == Series2)
Series3lc <- subset(g, taxonname == Series3)
Series4lc <- subset(g, taxonname == Series4)
map('state', '.', xlim=c(-106.0, -87), ylim=c(37.0, 49.0), lforce='e')
# add long/lat axes
map.axes()
# add locations of Series 1
points(y ~ x, data=site(Series1lc), pch=21, bg='RoyalBlue')
# add locations of Series 2
points(y ~ x, data=site(Series2lc), pch=21, bg='DarkRed')
# add locations of Series 3
points(y ~ x, data=site(Series3lc), pch=21, bg='DarkGreen')
# add locations of Series 4
points(y ~ x, data=site(Series4lc), pch=21, bg='Orange')
# add a simple legend
legend('topleft', pch=21, pt.bg=c('RoyalBlue', 'DarkRed', 'DarkGreen', 'Orange'),
legend=c(Series1, Series2, Series3, Series4), bty='n')
# converts series names to a factor for grouping in plots of soil properties
g$taxonname <- factor(g$taxonname)
par(mar=c(0,0,4,1))
groupedProfilePlot(g, groups = 'taxonname', color='silt', print.id=FALSE, name=NA)
groupedProfilePlot(g, groups = 'taxonname', color='clay', print.id=FALSE, name=NA)
groupedProfilePlot(g, groups = 'taxonname', color='estimated_om', print.id=FALSE, name=NA)
groupedProfilePlot(g, groups = 'taxonname', color='estimated_ph_h2o', print.id=FALSE, name=NA)
#Aggregation by 1 cm slices. Essentially, the slab function creates 1 cm
#thick slices from all horizons so the profiles can be compared
#at the same depths from the surface downward. Properties including
# % Clay, pH, Organic Matter, and Base Saturation at pH 8.2 are assigned
#to each 1 cm slab
g.slab <- slab(g, taxonname ~ silt + clay + estimated_om + estimated_ph_h2o)
# inspect stacked data structure (check on whether operation is done correctly)
str(g.slab)
# re-name soils with series name + number of pedons
new.levels <- c(Series1, Series2, Series3, Series4)
new.labels <- paste(new.levels, ' [', c(length(Series1lc), length(Series2lc), length(Series3lc), length(Series4lc)), ' pedons]', sep='')
g.slab$taxonname <- factor(g.slab$taxonname, levels=new.levels, labels=new.labels)
# new names should match the order in:
levels(g.slab$variable)
# re-name soil property labels-- order is critical !
levels(g.slab$variable) <- c('Silt (%)', 'Clay (%)','Estimated OM (%)', 'ph 1:1 H2O')
# define plotting style
tps <- list(superpose.line=list(col=c('RoyalBlue', 'DarkRed', 'DarkGreen', 'Orange'), lwd=2))
xyplot(top ~ p.q50 | variable, groups=taxonname, data=g.slab, ylab='Depth',
xlab='median bounded by 25th and 75th percentiles',
lower=g.slab$p.q25, upper=g.slab$p.q75, ylim=c(155,-5),
panel=panel.depth_function, alpha=0.25, sync.colors=TRUE,
prepanel=prepanel.depth_function,
cf=g.slab$contributing_fraction,
par.strip.text=list(cex=0.8),
strip=strip.custom(bg=grey(0.85)),
layout=c(4,1), scales=list(x=list(alternating=1, relation='free'), y=list(alternating=3)),
par.settings=tps,
auto.key=list(columns=3, lines=TRUE, points=FALSE)
)
Series1<-"kidder"
Series2<-"casco"
Series3<-"palms"
Series4<-"pella"
# fetch KSSL data by series name
sn <- c(Series1, Series2, Series3, Series4)
g <- fetchKSSL(series = sn, progress = FALSE)
# estimate soil depth based on horizon designations
sdc <- getSoilDepthClass(g, name='hzn_desgn')
# splice-into site data
site(g) <- sdc
# summarize soil depth by taxonname
tapply(g$depth, g$taxonname, summary)
# check
table(g$taxonname)
# normalize via lower-case
g$taxonname <- tolower(g$taxonname)
# OK
table(g$taxonname)
#any cases where the
Series1lc <- subset(g, taxonname == Series1)
Series2lc <- subset(g, taxonname == Series2)
Series3lc <- subset(g, taxonname == Series3)
Series4lc <- subset(g, taxonname == Series4)
map('state', '.', xlim=c(-106.0, -87), ylim=c(37.0, 49.0), lforce='e')
# add long/lat axes
map.axes()
# add locations of Series 1
points(y ~ x, data=site(Series1lc), pch=21, bg='RoyalBlue')
# add locations of Series 2
points(y ~ x, data=site(Series2lc), pch=21, bg='DarkRed')
# add locations of Series 3
points(y ~ x, data=site(Series3lc), pch=21, bg='DarkGreen')
# add locations of Series 4
points(y ~ x, data=site(Series4lc), pch=21, bg='Orange')
# add a simple legend
legend('topleft', pch=21, pt.bg=c('RoyalBlue', 'DarkRed', 'DarkGreen', 'Orange'),
legend=c(Series1, Series2, Series3, Series4), bty='n')
# converts series names to a factor for grouping in plots of soil properties
g$taxonname <- factor(g$taxonname)
par(mar=c(0,0,4,1))
groupedProfilePlot(g, groups = 'taxonname', color='silt', print.id=FALSE, name=NA)
groupedProfilePlot(g, groups = 'taxonname', color='clay', print.id=FALSE, name=NA)
groupedProfilePlot(g, groups = 'taxonname', color='estimated_om', print.id=FALSE, name=NA)
Series1<-"mchenry"
Series2<-"casco"
Series3<-"aztalan"
Series4<-"pella"
# fetch KSSL data by series name
sn <- c(Series1, Series2, Series3, Series4)
g <- fetchKSSL(series = sn, progress = FALSE)
# estimate soil depth based on horizon designations
sdc <- getSoilDepthClass(g, name='hzn_desgn')
# splice-into site data
site(g) <- sdc
# summarize soil depth by taxonname
tapply(g$depth, g$taxonname, summary)
# check
table(g$taxonname)
Series1<-"mchenry"
Series2<-"casco"
Series3<-"theresa"
Series4<-"pella"
# fetch KSSL data by series name
sn <- c(Series1, Series2, Series3, Series4)
g <- fetchKSSL(series = sn, progress = FALSE)
# estimate soil depth based on horizon designations
sdc <- getSoilDepthClass(g, name='hzn_desgn')
# splice-into site data
site(g) <- sdc
# summarize soil depth by taxonname
tapply(g$depth, g$taxonname, summary)
# check
table(g$taxonname)
# normalize via lower-case
g$taxonname <- tolower(g$taxonname)
# OK
table(g$taxonname)
#any cases where the
Series1lc <- subset(g, taxonname == Series1)
Series2lc <- subset(g, taxonname == Series2)
Series3lc <- subset(g, taxonname == Series3)
Series4lc <- subset(g, taxonname == Series4)
map('state', '.', xlim=c(-106.0, -87), ylim=c(37.0, 49.0), lforce='e')
# add long/lat axes
map.axes()
# add locations of Series 1
points(y ~ x, data=site(Series1lc), pch=21, bg='RoyalBlue')
# add locations of Series 2
points(y ~ x, data=site(Series2lc), pch=21, bg='DarkRed')
# add locations of Series 3
points(y ~ x, data=site(Series3lc), pch=21, bg='DarkGreen')
# add locations of Series 4
points(y ~ x, data=site(Series4lc), pch=21, bg='Orange')
# add a simple legend
legend('topleft', pch=21, pt.bg=c('RoyalBlue', 'DarkRed', 'DarkGreen', 'Orange'),
legend=c(Series1, Series2, Series3, Series4), bty='n')
# converts series names to a factor for grouping in plots of soil properties
g$taxonname <- factor(g$taxonname)
par(mar=c(0,0,4,1))
groupedProfilePlot(g, groups = 'taxonname', color='silt', print.id=FALSE, name=NA)
groupedProfilePlot(g, groups = 'taxonname', color='clay', print.id=FALSE, name=NA)
groupedProfilePlot(g, groups = 'taxonname', color='estimated_om', print.id=FALSE, name=NA)
groupedProfilePlot(g, groups = 'taxonname', color='estimated_ph_h2o', print.id=FALSE, name=NA)
#Aggregation by 1 cm slices. Essentially, the slab function creates 1 cm
#thick slices from all horizons so the profiles can be compared
#at the same depths from the surface downward. Properties including
# % Clay, pH, Organic Matter, and Base Saturation at pH 8.2 are assigned
#to each 1 cm slab
g.slab <- slab(g, taxonname ~ silt + clay + estimated_om + estimated_ph_h2o)
# inspect stacked data structure (check on whether operation is done correctly)
str(g.slab)
# re-name soils with series name + number of pedons
new.levels <- c(Series1, Series2, Series3, Series4)
new.labels <- paste(new.levels, ' [', c(length(Series1lc), length(Series2lc), length(Series3lc), length(Series4lc)), ' pedons]', sep='')
g.slab$taxonname <- factor(g.slab$taxonname, levels=new.levels, labels=new.labels)
# new names should match the order in:
levels(g.slab$variable)
# re-name soil property labels-- order is critical !
levels(g.slab$variable) <- c('Silt (%)', 'Clay (%)','Estimated OM (%)', 'ph 1:1 H2O')
# define plotting style
tps <- list(superpose.line=list(col=c('RoyalBlue', 'DarkRed', 'DarkGreen', 'Orange'), lwd=2))
xyplot(top ~ p.q50 | variable, groups=taxonname, data=g.slab, ylab='Depth',
xlab='median bounded by 25th and 75th percentiles',
lower=g.slab$p.q25, upper=g.slab$p.q75, ylim=c(155,-5),
panel=panel.depth_function, alpha=0.25, sync.colors=TRUE,
prepanel=prepanel.depth_function,
cf=g.slab$contributing_fraction,
par.strip.text=list(cex=0.8),
strip=strip.custom(bg=grey(0.85)),
layout=c(4,1), scales=list(x=list(alternating=1, relation='free'), y=list(alternating=3)),
par.settings=tps,
auto.key=list(columns=3, lines=TRUE, points=FALSE)
)
install.packages("tmap")
library(terra)
#mapping package
library(tmap)
#specialized tool for calculating sun angle and position by date and time of day
library(suntools)
#for using tools in qgis from an R script
library(qgisprocess)
install.packages("lidR")
library(sf)
library(sf)
remove.packages("sf", lib="~/R/win-library/4.1")
#mapping package
library(tmap)
install.packages("tmap")
detach("package:sp", unload = TRUE)
remove.packages("sf", lib="~/R/win-library/4.1")
install.packages("sf")
install.packages("tmap")
remove.packages("sf", lib="~/R/win-library/4.1")
#general package for geospatial work in R
library(terra)
#linked packages for working with soil survey data
#not used in this Binder notebook version
library(aqp)
library(soilDB)
library(sharpshootR)
setwd("C:/Users/mason/Documents/GitHub/R_Terrain_demo")
#read in a DEM and make a quick plot
Mondeaux_dtm <- rast("Mondeaux_dtm.tif")
plot(Mondeaux_dtm)
#read in a vector file (Ice Age Trail route)
#and convert to same projection as DEM, then crop
#to match the DEM
IAT<-vect("IAT.shp")
IAT_proj<-project(IAT, Mondeaux_dtm)
e<-ext(Mondeaux_dtm)
IAT_projc<-crop(IAT_proj, e)
IAT_points<-as.points(IAT_projc)
Mondeaux_CH <- rast("Mondeaux_CH.tif")
plot(Mondeaux_CH)
#clip out a new smaller DEM
e2<-c(698000,700000,5019200,5020500)
Mondeaux_dtm_sm<-crop(Mondeaux_dtm, e2)
plot(Mondeaux_dtm_sm)
#clip the canopy height layer and IAT shapefile as well
Mondeaux_CH_sm<-crop(Mondeaux_CH, ext(Mondeaux_dtm_sm))
plot(Mondeaux_CH_sm)
IAT_projc_sm<-crop(IAT_projc, ext(Mondeaux_dtm_sm))
IAT_points_sm<-as.points(IAT_projc_sm)
#use the smaller set of points along the Ice Age Trail
#to extract soil survey information. Start with polygons, each
#of which represents an instance of a mapunit,
#the basic unit of soil survey.
#Each mapunit can have two or more components, which
#are series of similar soils.
aoi_polygon_sm<-as.polygons(ext(Mondeaux_dtm_sm), crs=crs(Mondeaux_dtm_sm))
aoi_mapunits_sm<- SDA_spatialQuery(aoi_polygon_sm, what = 'mupolygon')
aoi_mu_sm_proj<-project(aoi_mapunits_sm, crs(aoi_polygon_sm))
aoi_mu_sm_cl<-crop(aoi_mu_sm_proj, Mondeaux_dtm_sm)
#now use mapunits to extract average properties for the
#components in each map unit
m<-get_SDA_property(property=c("om_r", "sandtotal_r"),bottom_depth=20,
method="Weighted Average",mukeys=aoi_mu_sm_cl$mukey)
#with match() and cbind() we can add properties to each
#point along the trail route
m2<-intersect(IAT_points_sm, aoi_mu_sm_cl)
m2$sandtotal_r[1:370]<-m$sandtotal_r[match(m2$mukey[1:370], m$mukey)]
writeVector(m2, "test.shp")
#with match() and cbind() we can add properties to each
#point along the trail route
m2<-as.data.frame(aoi_mu_sm_cl)
View(m2)
#with match() and cbind() we can add properties to each
#point along the trail route
m2<-intersect(IAT_points_sm, aoi_mu_sm_cl)
m2$sandtotal_r[1:370]<-m$sandtotal_r[match(m2$mukey[1:370], m$mukey)]
m3<-as.data.frame(IAT_points_sm)
View(m3)
#with match() and cbind() we can add properties to each
#point along the trail route
m2<-as.data.frame(intersect(IAT_points_sm, aoi_mu_sm_cl))
m2$sandtotal_r[1:371]<-m$sandtotal_r[match(m2$mukey[1:371], m$mukey)]
m2$om_r[1:370]<-m$om_r[match(m2$mukey[1:371], m$mukey)]
m2$om_r[1:371]<-m$om_r[match(m2$mukey[1:371], m$mukey)]
m_points_sm<-cbind(IAT_points_sm, m2)
plot(m_points_sm, "sandtotal_r", type="continuous")
